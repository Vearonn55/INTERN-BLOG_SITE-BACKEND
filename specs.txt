⸻

Blog Website Requirement Specification Document

⸻

1. Overview

This document defines the system requirements for a blog platform consisting of:
	•	A React frontend
	•	A Flask-based REST API backend
	•	A SQLAlchemy-managed SQL database
	•	API integration via Axios
	•	FastAPI-style documentation using Pydantic and SwaggerUI

The goal is to develop a full-featured blog system with:
	•	Admin-authoring capabilities
	•	Public user interaction (read-only)
	•	Secure API interactions
	•	Clean modular codebase structure
	•	Scalable architecture

⸻

2. User Roles & Permissions

Role	Permissions
Admin	CRUD posts, categories, tags, users; access dashboard; moderate comments
Author	CRUD own posts; view own analytics
Visitor	Read-only access to blog posts, comments, and search features


⸻

3. Frontend Requirements (React + Axios)

3.1. Pages / Views
	•	Home Page
		Recent posts
		Featured post
		Pagination
		Categories sidebar
	•	Post Detail Page
		Title, cover image, content (HTML/Markdown rendered)
		Author info
		Published date
		Tags
		Comments section
		Category Page
		List all posts under selected category
	•	Tag Page
		Filter posts by tag
		Search Results Page
		Query match by title/content
	•	Author Dashboard (Authenticated)
		View own posts
		Edit/delete options
		New post creation form
	•	Admin Panel
		User management
		Post moderation
		Comment moderation
		Category/tag CRUD
	•	Login/Register Pages
		Token-based login (JWT)
		Basic validation (frontend + backend)

⸻

4. Backend Requirements (Flask + SQLAlchemy)

4.1. Routes (RESTful API)

Method	Endpoint	            Description	                            Auth
GET	    /api/posts	            List all posts (pagination supported)	Public
GET	    /api/posts/<post_id>	Get single post	                        Public
POST	/api/posts	            Create post	                            Author+
PUT	    /api/posts/<post_id>	Edit post	                            Author+
DELETE	/api/posts/<post_id>	Delete post	                            Author+

Method	Endpoint	            Description	                            Auth
POST	/api/register	        Create new user	                        Public
POST	/api/login	            Authenticate user, return JWT	        Public
GET	    /api/me	                Get current logged-in user info	        Auth’d

Method	Endpoint	            Description	                            Auth
GET	    /api/categories	        List categories	                        Public
POST	/api/categories	        Create category	                        Admin
DELETE	/api/categories/<id>	Delete category	                        Admin

Method	Endpoint	            Description	                            Auth
POST	/api/comments/<post_id>	Submit comment	Visitor+
GET	    /api/comments/<post_id>	Get post comments	Public
DELETE	/api/comments/<comment_id>	Delete comment	Admin

4.2. Middleware
	•	JWT Authentication
	•	Role-based Access Control (RBAC)
	•	Error Handling Layer (custom exceptions)
	•	Rate Limiting (optional)

⸻

5. Database Design (SQLAlchemy ORM)

5.1. Tables / Models

User
- id (PK)
- username
- email
- password_hash
- role (admin, author)
- created_at

Post
- id (PK)
- title
- slug
- content
- image_url
- created_at
- updated_at
- published (bool)
- author_id (FK → User)

Category
- id (PK)
- name
- slug

Tag
- id (PK)
- name
- slug

PostTag
- post_id (FK)
- tag_id (FK)

Comment
- id (PK)
- content
- created_at
- post_id (FK)
- user_id (nullable, FK → User)


⸻

6. Data Validation & Serialization (Pydantic)
	•	Use pydantic.BaseModel for:
	•	Incoming request body validation (e.g., PostCreate, UserLogin, CommentCreate)
	•	Output schemas for consistency (e.g., PostOut, UserOut)

⸻

7. API Docs (SwaggerUI via FastAPI-style setup)
	•	Autogenerated via pydantic schemas and Flask decorators
	•	Routes exposed through /docs
	•	Authentication test tokens supported via Swagger header

⸻

8. Non-Functional Requirements

Category	Requirement
Performance	Homepage and post detail load time < 1 sec under moderate traffic
Scalability	Must support scaling backend and DB horizontally
Security	JWT auth, SQL Injection protection, XSS sanitization on frontend
Maintainability	Modular MVC structure, clean code separation
Documentation	API documented with Swagger; backend endpoints annotated
Logging	Request logging, error stack trace logging (file or external service)
Testing	Unit tests for API and model logic (pytest or unittest)
Deployment	Dockerized services; .env for config


⸻

9. Optional (For Future Enhancements)
	•	Post image uploads (Cloudinary/S3)
	•	Markdown post editing with preview
	•	Newsletter / Email Subscriptions
	•	Comment upvotes or moderation queue
	•	Admin analytics dashboard (traffic, post views, etc.)
	•	Dark/light theme toggle (frontend)

⸻

10. Tech Stack Summary

Layer	Tech
Frontend	React + Axios + Tailwind (or CSS)
Backend	Python Flask (Blueprints for modular routes)
ORM	SQLAlchemy (or SQLModel if preferred)
Auth	JWT tokens (PyJWT)
API Docs	Swagger UI + Pydantic Schemas
DB	MySQL / PostgreSQL
Dev Tools	Docker, Git, Prettier, Black
Hosting	Render, Heroku, or VPS


⸻

